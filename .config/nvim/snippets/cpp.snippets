# cp-template snippet
snippet cp
    #include <bits/stdc++.h>
    
    /*
    #include <ext/pb_ds/assoc_container.hpp>
    #include <ext/pb_ds/tree_policy.hpp>template
    */
    
    using namespace std;
    // using namespace __gnu_pbds;
    
    // typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
    
    typedef long long ll;
    typedef unsigned long long ull;
    typedef long double lld;
    typedef pair<int, int> pii;
    typedef pair<long long, long long> pll;
    typedef vector<int> vi;
    typedef vector<ll> vll;
    typedef vector<vi> vvi;
    typedef vector<vll> vvll;
    typedef vector<pii> vpii;
    typedef vector<pll> vpll;
    
    #define pb push_back
    #define fi first
    #define se second
    #define forn(i, n) for(int i = 0; i < n; i++)
    #define forv(x, a) for(auto &x : a)
    #define ford(i, n) for(int i = n - 1; i >= 0; i--)
    #define for1(i, n) for(int i = 1; i <= n; i++)
    #define forr(i, l, r) for(int i = l; i <= r; i++)
    #define forrd(i, l, r) for(int i = r; i >= l; i--)
    #define all(a) (a).begin(), (a).end()
    #define rall(a) (a).rbegin(), (a).rend()
    #define len(a) (int)(a).size()
    #define sq(x) (x) * (x)
    
    #ifdef SARTHAK_LOCAL
    #include "/Users/sarthakkumar/work/Cpp/Templates/CP_Templates/debug.cpp"
    #else
    #define debug(...) 69
    #endif
    
    template <typename T> T gcd(T a, T b) {
        while(b) {
            a %= b;
            swap(a, b);
        }
        return a;
    }
    
    bool islower(char c) { return c >= 'a' && c <= 'z'; }
    bool isupper(char c) { return c >= 'A' && c <= 'Z'; }
    void tolower(char &c) { c = isupper(c) ? c = 'a' + (c - 'A') : c; }
    void toupper(char &c) { c = islower(c) ? c = 'A' + (c - 'a') : c; }
    template <typename T> bool cmin(T &a, T b) { return b < a ? a = b, 1 : 0; }
    template <typename T> bool cmax(T &a, T b) { return b > a ? a = b, 1 : 0; }
    
    void Main(int tc) {
        ${0}
    }
    
    #define MULTI // comment for single test
    
    int main() {
        ios::sync_with_stdio(0), cin.tie(NULL), cout << setprecision(12) << fixed;
    
        int tt = 1;
    #ifdef MULTI
        cin >> tt;
    #endif
    
        for(int t = 1; t <= tt; t++) {
    #ifdef SARTHAK_LOCAL
            cerr << "Test Case: #" << t << '\n';
            cerr << "---------------" << '\n';
    #endif
    
            Main(t);
    
    #ifdef SARTHAK_LOCAL
            cerr << "---------------" << '\n';
    #endif
        }
    
    #ifdef SARTHAK_LOCAL
        cerr << "Total Time: " << (double)clock() * 1e3 / CLOCKS_PER_SEC << "ms" << '\n';
    #endif
        return 0;
    }


# cpp template
snippet temp

    #include <bits/stdc++.h>
    using namespace std;

    #ifdef SARTHAK_LOCAL
    #include "/Users/sarthakkumar/work/Cpp/Templates/CP_Templates/debug.cpp"
    #else
    #define debug(...) 69
    #endif

    int main() {
        ios::sync_with_stdio(0), cin.tie(NULL), cout << setprecision(12) << fixed;

        ${0}

        return 0;
    }

# mod integer
snippet mint
	template <typename T>
	T inverse(T a, T m) {
	    T u = 0, v = 1;
	    while (a != 0) {
	        T t = m / a;
	        m -= t * a; swap(a, m);
	        u -= t * v; swap(u, v);
	    }
	    assert(m == 1);
	    return u;
	}
	
	template<typename VarMod>
	class ModInt {
	public:
	    using Type = typename decay<decltype(VarMod::value)>::type;
	
	public:
	    ModInt(): v(0) {}
	
	    template<typename T>
	    ModInt(T v_) {
	        v = normalize(v_);
	    }
	
	    static const Type mod() { return VarMod::value; }
	
	    const Type& operator()() const { return v; }
	    template<typename U> explicit operator U() const { return static_cast<U>(v); }
	
	    ModInt& operator += (const ModInt& other) { v = normalize((int64_t)v + (int64_t)other.v); return *this; }
	    ModInt& operator -= (const ModInt& other) { v = normalize((int64_t)v - (int64_t)other.v); return *this; }
	    ModInt& operator *= (const ModInt& other) { v = normalize((int64_t)v * (int64_t)other.v); return *this; }
	    ModInt& operator /= (const ModInt& other) { *this *= ModInt(inverse(other.v, mod())); return *this; }
	
	    template<typename U> ModInt& operator += (const U& other) { return *this += ModInt(other); }
	    template<typename U> ModInt& operator -= (const U& other) { return *this -= ModInt(other); }
	    template<typename U> ModInt& operator *= (const U& other) { return *this *= ModInt(other); }
	    template<typename U> ModInt& operator /= (const U& other) { return *this /= ModInt(other); }
	
	    ModInt& operator ++ () { return *this += 1; }
	    ModInt& operator -- () { return *this -= 1; }
	
	    ModInt operator ++ (int) { ModInt result(*this); *this += 1; return result; }
	    ModInt operator -- (int) { ModInt result(*this); *this -= 1; return result; }
	
	    ModInt operator + () const { return ModInt(v); }
	    ModInt operator - () const { return ModInt(-v); }
	
	    friend ModInt operator + (const ModInt& a, const ModInt& b) { return ModInt(a) += b; }
	    friend ModInt operator - (const ModInt& a, const ModInt& b) { return ModInt(a) -= b; }
	    friend ModInt operator * (const ModInt& a, const ModInt& b) { return ModInt(a) *= b; }
	    friend ModInt operator / (const ModInt& a, const ModInt& b) { return ModInt(a) /= b; }
	
	    template<typename U> friend ModInt operator + (const ModInt& a, const U& b) { return ModInt(a) += b; }
	    template<typename U> friend ModInt operator - (const ModInt& a, const U& b) { return ModInt(a) -= b; }
	    template<typename U> friend ModInt operator * (const ModInt& a, const U& b) { return ModInt(a) *= b; }
	    template<typename U> friend ModInt operator / (const ModInt& a, const U& b) { return ModInt(a) /= b; }
	
	    template<typename U> friend ModInt operator + (const U& a, const ModInt& b) { return ModInt(a) += b; }
	    template<typename U> friend ModInt operator - (const U& a, const ModInt& b) { return ModInt(a) -= b; }
	    template<typename U> friend ModInt operator * (const U& a, const ModInt& b) { return ModInt(a) *= b; }
	    template<typename U> friend ModInt operator / (const U& a, const ModInt& b) { return ModInt(a) /= b; }
	
	    friend bool operator == (const ModInt& a, const ModInt& b) { return a.v == b.v; }
	    friend bool operator != (const ModInt& a, const ModInt& b) { return !(a == b); }
	
	    template<typename U> friend bool operator == (const ModInt& a, const U& b) { return a.v == ModInt(b); }
	    template<typename U> friend bool operator == (const U& a, const ModInt& b) { return ModInt(a) == b; }
	
	    template<typename U> friend bool operator != (const ModInt& a, const U& b) { return a.v != ModInt(b); }
	    template<typename U> friend bool operator != (const U& a, const ModInt& b) { return ModInt(a) != b; }
	
	    friend bool operator < (const ModInt& a, const ModInt& b) { return a.v < b.v; }
	    template<typename U> friend bool operator < (const ModInt& a, const U& b) { return a < ModInt(b); }
	    template<typename U> friend bool operator < (const U& a, const ModInt& b) { return ModInt(a) < b; }
	
	    friend bool operator <= (const ModInt& a, const ModInt& b) { return a.v <= b.v; }
	    template<typename U> friend bool operator <= (const ModInt& a, const U& b) { return a <= ModInt(b); }
	    template<typename U> friend bool operator <= (const U& a, const ModInt& b) { return ModInt(a) <= b; }
	
	    friend bool operator > (const ModInt& a, const ModInt& b) { return a.v > b.v; }
	    template<typename U> friend bool operator > (const ModInt& a, const U& b) { return a > ModInt(b); }
	    template<typename U> friend bool operator > (const U& a, const ModInt& b) { return ModInt(a) > b; }
	
	    friend bool operator >= (const ModInt& a, const ModInt& b) { return a.v >= b.v; }
	    template<typename U> friend bool operator >= (const ModInt& a, const U& b) { return a >= ModInt(b); }
	    template<typename U> friend bool operator >= (const U& a, const ModInt& b) { return ModInt(a) >= b; }
	
	    friend std::ostream& operator << (std::ostream& out, const ModInt& n) { return out << Type(n); }
	    friend std::istream& operator >> (std::istream& in, ModInt& n) { int64_t v_; in >> v_; n = ModInt(v_); return in; }
	
	private:
	    template<typename T>
	    static Type normalize(T x) {
	        Type v = static_cast<Type>(x % mod());
	
	        if(v < 0) v += mod();
	        return v;
	    }
	
	private:
	    Type v;
	};
	
	template<typename T, typename U>
	T power(const T& base, const U& exp) {
	    assert(exp >= 0);
	    T x=base, res=1;
	    U p=exp;
	    while (p > 0) {
	        if (p & 1) res*=x;
	        x*=x;
	        p>>=1;
	    }
	    return res;
	}
	
	template <typename T>
	std::string to_string(const ModInt<T>& number) {
	    return to_string(number());
	}
	
	/*
	using ModType = int;
	struct VarMod { static ModType value; };
	ModType VarMod::value = 1000000007;
	ModType& md = VarMod::value;
	
	using Mint = ModInt<VarMod>;
	*/
	
	constexpr int md = ${1:1000000007};
	using Mint = ModInt<std::integral_constant<decay<decltype(md)>::type, md>>;
	
	/*
	std::vector<Mint> fact(1, 1);
	std::vector<Mint> inv_fact(1, 1);
	
	Mint C(int n, int k) {
		if (k < 0 || k > n) return 0;
	
		while((int)fact.size() < n + 1) {
			fact.push_back(fact.back() * (int)fact.size());
			inv_fact.push_back(1 / fact.back());
		}
		return fact[n] * inv_fact[k] * inv_fact[n - k];
	}
	*/


# fenwick tree
snippet fenwick
	template<typename T> class Fenwick {
	public:
		Fenwick(int n, T v = static_cast<T>(0)) { m_fenwick.assign(n, v); }
	    template<typename U> Fenwick(const vector<U>& a) { m_fenwick.assign(a.begin(), a.end()); }
	
	    // Update node i with value v
		void update(int i, T v) {
			int j = i;
			while(j < (int)m_fenwick.size()) {
				m_fenwick[j] += v;
				j = j | (j + 1);
			}
		}
	    // Get sum from l ... r
		T get(int l, int r) { return pref(r) - pref(l - 1); }
	private:
		T pref(int r) {
			int i = r;
			T res = 0;
			while (i >= 0) {
				res += m_fenwick[i];
				i = (i & (i + 1)) - 1;
			}
			return res;
		}
	
	private:
		std::vector<T> m_fenwick;
	};


# basic number theory

snippet numberTheory
	namespace Number_Theory {
	    static bool initialized = false;
	
	    static std::vector<bool> prime;
	    static std::vector<int> primes;
	
	    void init(int N = 10000000) {
	        prime.assign(N + 1, true);
	
	        prime[0] = prime[1] = false;
	        primes = {};
	
	        for(long long p = 0; p * p <= N; p++) {
	            if(!prime[p]) continue;
	            primes.emplace_back(p);
	            for(long long y = 2 * p; y <= N; y += p) {
	                prime[y] = false;
	            }
	        }
	        initialized = true;
	    }
	
		// list of { prime_factor, count }
		std::vector<std::pair<long long, long long>> factors(long long N) {
	        if(!initialized) init();
	
			std::vector<std::pair<long long, long long>> facts;
			for(long long x = 2; x * x <= N; x++) {
				if(prime[x] && N%x == 0) {
					long long cnt = 0;
					while(N > 1 && N%x == 0) N /= x, cnt++;
					facts.emplace_back(x, cnt);
				}
			}
			if(N > 1) facts.emplace_back(N, 1);
			return facts;
		}
	
		// divisor of a number in sorted order
		std::vector<long long> divisors(long long N) {
			std::vector<long long> divs;
			for(long long x = 1; x * x <= N; x++) {
				if(N%x == 0) {
					divs.push_back(x); if(N / x != x) divs.push_back(N / x);
				}
			}
			if(divs.size()) std::sort(divs.begin(), divs.end());
			return divs;
		}
	
	    long long binpower(long long base, long long e, long long mod) {
	    long long result = 1;
	    base %= mod;
	    while (e) {
	        if (e & 1) result = (__int128_t)result * base % mod;
	        base = (__int128_t)base * base % mod;
	        e >>= 1;
	    }
	    return result;
	}
	
	    bool check_composite(long long n, long long a, long long d, int s) {
	        long long x = binpower(a, d, n);
	        if (x == 1 || x == n - 1)
	            return false;
	        for (int r = 1; r < s; r++) {
	            x = (__int128_t)x * x % n;
	            if (x == n - 1)
	                return false;
	        }
	        return true;
	    };
	
	    bool MillerRabin(long long n, int iter=5) { // returns true if n is probably prime, else returns false.
	        static mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
	        if (n < 4) return n == 2 || n == 3;
	
	        int s = 0;
	        long long d = n - 1;
	        while ((d & 1) == 0) {
	            d >>= 1;
	            s++;
	        }
	
	        for (int i = 0; i < iter; i++) {
	            int a = 2 + rand() % (n - 3);
	            if (check_composite(n, a, d, s)) return false;
	        }
	        return true;
	    }
	}
	using namespace Number_Theory;
	
